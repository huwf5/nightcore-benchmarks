#!/usr/bin/python3

import os
import sys
import time
import json
import yaml
import random
import string
import argparse
import subprocess as sp

ALIYUN_REGION = 'cn-hongkong'
ALIYUN_REGION_ID = 'cn-hongkong'
# TODO: export image to public
IMAGE_ID = 'm-j6c5jx1e0oezs1lhofxj'

SECURITY_GROUP_NAME = 'nightcore'
DEPLOYMENT_SET_NAME = 'nightcore-experiments'
ZONE_ID = 'cn-hongkong-d'

# TODO: auto detect?
VSWITCH_ID = 'vsw-j6ccktc356urirhqyw8kn'

def random_string(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(length))

def run_aliyun_ecs_command(cmd):
    ret = sp.run(['aliyun', 'ecs', '--region', ALIYUN_REGION, '--RegionId', ALIYUN_REGION_ID] + cmd,
                 stdout=sp.PIPE, stderr=sp.PIPE, encoding='utf8', cwd=os.environ['HOME'])
    if ret.returncode != 0:
        raise Exception('Failed to run aliyun ecs command: ' + ret.stderr)
    result = ret.stdout.strip()
    return json.loads(result) if result != '' else {}


def run_remote_command(ssh_str, cmd):
    ret = sp.run(['ssh', '-q', ssh_str, '--'] + cmd,
                 stdout=sp.PIPE, stderr=sp.PIPE, encoding='utf8')
    if ret.returncode != 0:
        raise Exception('Failed to run remote command: ' + ' '.join(cmd) + '\n' + ret.stderr)
    return ret.stdout, ret.stderr

def describe_ecs_instance(instance_id):
    cli_output = run_aliyun_ecs_command([
        'DescribeInstances', '--InstanceIds', '["' + instance_id + '"]', '--pager'
    ])
    return cli_output['Instances']['Instance'][0]

def start_ecs_instance(name, instance_type, security_group_id, deployment_set_id):
    cli_output = run_aliyun_ecs_command([
        'RunInstances', '--ImageId', IMAGE_ID, '--InstanceType', instance_type,
        '--SecurityGroupId', security_group_id, '--InstanceName', name,
        '--InternetMaxBandwidthIn', '10', '--InternetMaxBandwidthOut', '100',
        '--DeploymentSetId', deployment_set_id, 
        '--VSwitchId', VSWITCH_ID, '--ZoneId', ZONE_ID,
        '--SystemDisk.Category', 'cloud_essd'
    ])
    instance_id = cli_output["InstanceIdSets"]["InstanceIdSet"][0]
    instance_info = describe_ecs_instance(instance_id)
    ip = instance_info['VpcAttributes']['PrivateIpAddress']['IpAddress'][0]
    return {
        'instance_id': instance_id,
        'dns': instance_info['InnerIpAddress']['IpAddress'][0],
        'ip': ip
    }

def stop_instances(machine_infos):
    instance_ids = list(map(lambda x: x['instance_id'], machine_infos.values()))
    if len(instance_ids) == 0:
        return
    # compose instance id params
    instance_id_params = []
    for index, instance_id in enumerate(instance_ids, start=1):
        instance_id_params.append(f'--InstanceId.{index}')
        instance_id_params.append(instance_id)
    
    run_aliyun_ecs_command(['DeleteInstances', '--Force', 'true'] + instance_id_params)

def find_security_group_id():
    cli_output = run_aliyun_ecs_command([
        'DescribeSecurityGroups', '--SecurityGroupName', SECURITY_GROUP_NAME,
        '--pager'
    ])
    if len(cli_output['SecurityGroups']['SecurityGroup']) == 0:
        raise Exception('Security group %s not found' % SECURITY_GROUP_NAME)
    return cli_output['SecurityGroups']['SecurityGroup'][0]['SecurityGroupId']

def find_deployment_set_id():
    cli_output = run_aliyun_ecs_command([
        'DescribeDeploymentSets', '--DeploymentSetName', DEPLOYMENT_SET_NAME,
        '--pager'
    ])
    if len(cli_output['DeploymentSets']['DeploymentSet']) == 0:
        raise Exception('Deployment set %s not found' % DEPLOYMENT_SET_NAME)
    return cli_output['DeploymentSets']['DeploymentSet'][0]['DeploymentSetId']

def start_instances(machine_configs):
    security_group_id = find_security_group_id()
    deployment_set_id = find_deployment_set_id()
    results = {}
    for name, config in machine_configs.items():
        try:
            machine_info = start_ecs_instance(name, config['type'], security_group_id, deployment_set_id)
            machine_info['role'] = config['role']
            if 'labels' in config:
                machine_info['labels'] = config['labels']
            results[name] = machine_info
        except Exception as e:
            stop_instances(results)
            raise e
    return results

# TODO: test in the cloud
def setup_hostname_for_machines(machine_infos):
    for name, machine_info in machine_infos.items():
        run_remote_command(machine_info['dns'], ['sudo', 'hostnamectl', 'set-hostname', name])


if __name__ == '__main__':
    pass
    # security_group_id = find_security_group_id()
    # print(security_group_id)
    # instance_id = start_ecs_instance('test', 'ecs.hfr8i.xlarge', security_group_id)
    # instance_info = describe_ecs_instance(instance_id)
    # deployment_set_id = find_deployment_set_id()
    # print(deployment_set_id)

